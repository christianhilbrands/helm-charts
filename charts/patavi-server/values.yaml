replicaCount: 1

image:
  repository: addis/patavi
  pullPolicy: IfNotPresent
  tag: "secure6"

postgresql:
  postgresqlUsername: patavi
  postgresqlDatabase: patavi
  postgresqlPassword: xxxxx
  initdbUser: patavi
  initdbPassword: patavi
  master:
    extraInitContainers:
      - name: get-database-schema
        image: k8s.gcr.io/git-sync/git-sync:v3.3.5
        volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/drugis/patavi
        - name: GIT_SYNC_BRANCH
          value: master
        - name: GIT_SYNC_DEPTH
          value: "1"
        - name: GIT_SYNC_ONE_TIME
          value: "true"
        - name: GIT_SYNC_ROOT
          value: /docker-entrypoint-initdb.d
      - name: cleanup-repo
        image: busybox:1.28
        command: ['sh', '-c', "cd /docker-entrypoint-initdb.d && find . ! -name 'schema.sql' -type f -exec rm -f {} +"]
        volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
    extraVolumes:
      - name: initdb
        emptyDir: {}
    extraVolumeMounts:
      - name: initdb
        mountPath: /docker-entrypoint-initdb.d

hostLink: patavi.dev.molgenis.org
proxyHost: patavi.dev.molgenis.org
apiKey: xxxxx

rabbitmq:
  brokerHost: rabbitmq.rabbitmq.svc
  user: drugis
  password: verysecret

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podSecurityContext: {}
securityContext: {}

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: patavi.drugis.org
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}
